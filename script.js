// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_KEY = "0385b4b3574b96a26453f275b7d20a02";
let currentCityName = "–ú–æ—Å–∫–≤–∞";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
const tg = window.Telegram.WebApp;
tg.expand();
tg.setHeaderColor('#4CAF50');
tg.setBackgroundColor('#f0f8ff');
document.body.dataset.theme = tg.colorScheme;

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const cityInput = document.getElementById('city-input');
const searchBtn = document.getElementById('search-btn');
const locationBtn = document.getElementById('location-btn');
const currentIcon = document.getElementById('current-icon');
const currentTemp = document.getElementById('current-temp');
const currentCity = document.getElementById('current-city');
const humidity = document.getElementById('humidity');
const wind = document.getElementById('wind');
const forecastContainer = document.getElementById('forecast');
const citySuggestions = document.querySelector('.city-suggestions');
const weatherDetails = document.querySelector('.weather-details');

// –ò–∫–æ–Ω–∫–∏ –ø–æ–≥–æ–¥—ã
const weatherIcons = {
    '01d': '‚òÄÔ∏è', '01n': 'üåô',
    '02d': '‚õÖ', '02n': '‚õÖ',
    '03d': '‚òÅÔ∏è', '03n': '‚òÅÔ∏è',
    '04d': '‚òÅÔ∏è', '04n': '‚òÅÔ∏è',
    '09d': 'üåßÔ∏è', '09n': 'üåßÔ∏è',
    '10d': 'üå¶Ô∏è', '10n': 'üå¶Ô∏è',
    '11d': '‚õàÔ∏è', '11n': '‚õàÔ∏è',
    '13d': '‚ùÑÔ∏è', '13n': '‚ùÑÔ∏è',
    '50d': 'üå´Ô∏è', '50n': 'üå´Ô∏è'
};

// –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤
cityInput.addEventListener('input', async (e) => {
    const query = e.target.value.trim();
    if (query.length < 2) {
        citySuggestions.style.display = 'none';
        return;
    }

    try {
        const response = await fetch(
            `https://api.openweathermap.org/geo/1.0/direct?q=${query}&limit=5&appid=${API_KEY}`
        );
        const cities = await response.json();
        
        citySuggestions.innerHTML = '';
        if (cities.length > 0) {
            cities.forEach(city => {
                const suggestion = document.createElement('div');
                suggestion.className = 'suggestion';
                suggestion.textContent = `${city.name}, ${city.country}`;
                suggestion.addEventListener('click', () => {
                    cityInput.value = city.name;
                    citySuggestions.style.display = 'none';
                    fetchWeather(city.name);
                });
                citySuggestions.appendChild(suggestion);
            });
            citySuggestions.style.display = 'block';
        } else {
            citySuggestions.style.display = 'none';
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
        citySuggestions.style.display = 'none';
    }
});

// –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –ø–æ–ª—è
document.addEventListener('click', (e) => {
    if (e.target !== cityInput) {
        citySuggestions.style.display = 'none';
    }
});

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
function getLocation() {
    if (navigator.geolocation) {
        tg.showPopup({
            title: "–î–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏",
            message: "–†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é?",
            buttons: [
                {id: 'yes', type: 'default', text: '–†–∞–∑—Ä–µ—à–∏—Ç—å'},
                {type: 'cancel', text: '–û—Ç–º–µ–Ω–∞'}
            ]
        }, (buttonId) => {
            if (buttonId === 'yes') {
                navigator.geolocation.getCurrentPosition(
                    async (position) => {
                        const { latitude, longitude } = position.coords;
                        try {
                            const response = await fetch(
                                `https://api.openweathermap.org/geo/1.0/reverse?lat=${latitude}&lon=${longitude}&limit=1&appid=${API_KEY}`
                            );
                            const locationData = await response.json();
                            if (locationData.length > 0) {
                                const city = locationData[0].name;
                                cityInput.value = city;
                                fetchWeather(city);
                            }
                        } catch (error) {
                            console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞:', error);
                            tg.showAlert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥. –í–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.");
                        }
                    },
                    (error) => {
                        console.error('–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
                        tg.showAlert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.");
                    }
                );
            }
        });
    } else {
        tg.showAlert("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º.");
    }
}

locationBtn.addEventListener('click', getLocation);

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–≥–æ–¥—ã
async function fetchWeather(city) {
    try {
        forecastContainer.innerHTML = '';
        weatherDetails.innerHTML = '';
        
        const currentResponse = await fetch(
            `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${API_KEY}&lang=ru`
        );
        const currentData = await currentResponse.json();
        
        if (currentData.cod !== 200) {
            throw new Error("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.");
        }

        const forecastResponse = await fetch(
            `https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&appid=${API_KEY}&lang=ru`
        );
        const forecastData = await forecastResponse.json();
        
        if (forecastData.cod !== "200") {
            throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞");
        }

        displayWeather(currentData, forecastData);
        localStorage.setItem('lastCity', city);
        currentCityName = city;
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞:", error);
        if (cityInput.value.trim()) {
            tg.showAlert(error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö");
        }
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
function displayWeather(current, forecast) {
    currentIcon.textContent = weatherIcons[current.weather[0].icon] || 'üå§Ô∏è';
    currentTemp.textContent = `${Math.round(current.main.temp)}¬∞C`;
    currentCity.textContent = current.name;
    humidity.textContent = `üíß ${current.main.humidity}%`;
    wind.textContent = `üå¨Ô∏è ${Math.round(current.wind.speed)} –º/—Å`;

    // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    weatherDetails.innerHTML = `
        <div class="detail">
            <span>–û—â—É—â–∞–µ—Ç—Å—è</span>
            <span>${Math.round(current.main.feels_like)}¬∞C</span>
        </div>
        <div class="detail">
            <span>–î–∞–≤–ª–µ–Ω–∏–µ</span>
            <span>${Math.round(current.main.pressure * 0.75)} –º–º —Ä—Ç.—Å—Ç.</span>
        </div>
        <div class="detail">
            <span>–í–æ—Å—Ö–æ–¥</span>
            <span>${new Date(current.sys.sunrise * 1000).toLocaleTimeString('ru', {timeStyle: 'short'})}</span>
        </div>
        <div class="detail">
            <span>–ó–∞–∫–∞—Ç</span>
            <span>${new Date(current.sys.sunset * 1000).toLocaleTimeString('ru', {timeStyle: 'short'})}</span>
        </div>
    `;

    // –ü—Ä–æ–≥–Ω–æ–∑
    if (forecast && forecast.list) {
        const dailyForecast = forecast.list.filter((item, index) => index % 8 === 0);
        
        dailyForecast.slice(0, 5).forEach(day => {
            const date = new Date(day.dt * 1000);
            const dayName = date.toLocaleDateString('ru', { weekday: 'short' });
            
            const forecastItem = document.createElement('div');
            forecastItem.className = 'forecast-item';
            forecastItem.innerHTML = `
                <div>${dayName}</div>
                <div style="font-size:24px">${weatherIcons[day.weather[0].icon] || 'üå§Ô∏è'}</div>
                <div>${Math.round(day.main.temp)}¬∞C</div>
            `;
            
            forecastContainer.appendChild(forecastItem);
        });
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è
    if (window.gsap) {
        gsap.from(".current-weather, .forecast-item", {
            opacity: 0,
            y: 20,
            stagger: 0.1,
            duration: 0.5
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
searchBtn.addEventListener('click', () => {
    const city = cityInput.value.trim();
    if (city) {
        fetchWeather(city);
    }
});

cityInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        searchBtn.click();
    }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
document.addEventListener('DOMContentLoaded', () => {
    const savedCity = localStorage.getItem('lastCity') || '–ú–æ—Å–∫–≤–∞';
    cityInput.value = savedCity;
    fetchWeather(savedCity);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç–µ–º—ã Telegram
tg.onEvent('themeChanged', () => {
    document.body.dataset.theme = tg.colorScheme;
});
