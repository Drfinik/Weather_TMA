// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_KEY = "0385b4b3574b96a26453f275b7d20a02";
let currentCityName = "–ú–æ—Å–∫–≤–∞";

// –§–æ–Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
const weatherBackgrounds = {
    '01d': 'images/sunny.jpg',
    '01n': 'images/night.jpg',
    // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ–Ω—ã ...
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
const tg = window.Telegram.WebApp;
tg.expand();

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const elements = {
    cityInput: document.getElementById('city-input'),
    locationBtn: document.getElementById('location-btn'),
    searchBtn: document.getElementById('search-btn'),
    currentCity: document.getElementById('current-city'),
    currentTemp: document.getElementById('current-temp'),
    // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã ...
};

// –ò–∫–æ–Ω–∫–∏ –ø–æ–≥–æ–¥—ã
const weatherIcons = {
    '01d': '‚òÄÔ∏è', '01n': 'üåô',
    // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ ...
};

// –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤
elements.cityInput.addEventListener('input', async (e) => {
    // ... (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
elements.searchBtn.addEventListener('click', () => {
    const city = elements.cityInput.value.trim();
    if (city) fetchWeather(city);
});

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
function getLocation() {
    // ... (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–≥–æ–¥—ã
async function fetchWeather(city) {
    try {
        elements.hourlyForecast.innerHTML = '';
        elements.dailyForecast.innerHTML = '';

        // 1. –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
        const geoResponse = await fetch(
            `https://api.openweathermap.org/geo/1.0/direct?q=${city}&limit=1&appid=${API_KEY}`
        );
        const geoData = await geoResponse.json();
        
        if (!geoData.length) throw new Error("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!");

        const { lat, lon } = geoData[0];

        // 2. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –∏ –ø—Ä–æ–≥–Ω–æ–∑
        const [currentResponse, forecastResponse] = await Promise.all([
            fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${API_KEY}&lang=ru`),
            fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&units=metric&appid=${API_KEY}&lang=ru`)
        ]);

        const currentData = await currentResponse.json();
        const forecastData = await forecastResponse.json();

        if (currentData.cod !== 200 || forecastData.cod !== "200") {
            throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö");
        }

        setWeatherBackground(currentData.weather[0].icon);
        displayWeather(currentData, forecastData);
        localStorage.setItem('lastCity', city);
        currentCityName = city;

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞:", error);
        tg.showAlert(error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö");
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã —Å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–µ–π —á–∞—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function displayWeather(current, forecast) {
    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    elements.currentCity.textContent = current.name;
    elements.currentTemp.textContent = `${Math.round(current.main.temp)}¬∞`;
    elements.currentCondition.textContent = current.weather[0].description;
    elements.tempMax.textContent = `–ú–∞–∫—Å.: ${Math.round(current.main.temp_max)}¬∞`;
    elements.tempMin.textContent = `–ú–∏–Ω.: ${Math.round(current.main.temp_min)}¬∞`;

    // –î–µ—Ç–∞–ª–∏ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    // ...

    // –ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ —Å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–µ–π
    elements.hourlyForecast.innerHTML = '';
    const now = new Date();
    const currentHour = now.getHours();

    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ 24 —á–∞—Å–∞
    for (let i = 0; i < 24; i++) {
        const targetHour = (currentHour + i) % 24;
        const targetTime = new Date(now);
        targetTime.setHours(targetHour, 0, 0, 0);

        // –ù–∞—Ö–æ–¥–∏–º –¥–≤–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
        let prev = forecast.list[0], next = forecast.list[0];
        for (const item of forecast.list) {
            const itemTime = new Date(item.dt * 1000);
            if (itemTime <= targetTime) prev = item;
            if (itemTime >= targetTime && next === forecast.list[0]) next = item;
        }

        // –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        const prevTime = new Date(prev.dt * 1000);
        const nextTime = new Date(next.dt * 1000);
        const ratio = (targetTime - prevTime) / (nextTime - prevTime);

        const interpolatedTemp = prev.main.temp + (next.main.temp - prev.main.temp) * ratio;
        const interpolatedIcon = ratio < 0.5 ? prev.weather[0].icon : next.weather[0].icon;

        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞
        const hourItem = document.createElement('div');
        hourItem.className = 'hourly-item';
        hourItem.innerHTML = `
            <div class="time">${targetHour}:00</div>
            <div class="icon">${weatherIcons[interpolatedIcon] || 'üå§Ô∏è'}</div>
            <div class="temp">${Math.round(interpolatedTemp)}¬∞</div>
        `;
        elements.hourlyForecast.appendChild(hourItem);
    }

    // –î–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    const dailyForecast = forecast.list.filter((item, index) => index % 8 === 0);
    dailyForecast.slice(0, 10).forEach(day => {
        // ... (–∫–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞) ...
    });

    // –ê–Ω–∏–º–∞—Ü–∏—è
    if (window.gsap) {
        gsap.from(".card", { opacity: 0, y: 20, stagger: 0.1, duration: 0.5 });
    }
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (setWeatherBackground, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
// ... (–∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏) ...

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    const savedCity = localStorage.getItem('lastCity') || '–ú–æ—Å–∫–≤–∞';
    elements.cityInput.value = savedCity;
    fetchWeather(savedCity);
});
