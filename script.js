// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_KEY = "0385b4b3574b96a26453f275b7d20a02";
let currentCityName = "–ú–æ—Å–∫–≤–∞";

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–µ–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
const isTelegram = () => {
    return window.Telegram && Telegram.WebApp && Telegram.WebApp.initData;
};

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
const showAlert = (message) => {
    if (isTelegram()) {
        Telegram.WebApp.showAlert(message);
    } else {
        alert(message);
    }
};

// –§–æ–Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
const weatherBackgrounds = {
    '01d': 'images/sunny.jpg',
    '01n': 'images/night.jpg',
    '02d': 'images/partly-cloudy.jpg',
    '02n': 'images/partly-cloudy-night.jpg',
    '03d': 'images/cloudy.jpg',
    '03n': 'images/cloudy-night.jpg',
    '04d': 'images/overcast.jpg',
    '04n': 'images/overcast-night.jpg',
    '09d': 'images/rain.jpg',
    '09n': 'images/rain-night.jpg',
    '10d': 'images/showers.jpg',
    '10n': 'images/showers-night.jpg',
    '11d': 'images/thunderstorm.jpg',
    '11n': 'images/thunderstorm-night.jpg',
    '13d': 'images/snow.jpg',
    '13n': 'images/snow-night.jpg',
    '50d': 'images/fog.jpg',
    '50n': 'images/fog-night.jpg'
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
if (isTelegram()) {
    Telegram.WebApp.expand();
}

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const elements = {
    cityInput: document.getElementById('city-input'),
    locationBtn: document.getElementById('location-btn'),
    searchBtn: document.getElementById('search-btn'),
    currentCity: document.getElementById('current-city'),
    currentTemp: document.getElementById('current-temp'),
    currentCondition: document.getElementById('current-condition'),
    tempMax: document.getElementById('temp-max'),
    tempMin: document.getElementById('temp-min'),
    humidity: document.getElementById('humidity'),
    wind: document.getElementById('wind'),
    feelsLike: document.getElementById('feels-like'),
    pressure: document.getElementById('pressure'),
    sunrise: document.getElementById('sunrise'),
    sunset: document.getElementById('sunset'),
    visibility: document.getElementById('visibility'),
    uvIndex: document.getElementById('uv-index'),
    hourlyForecast: document.getElementById('hourly-forecast'),
    dailyForecast: document.getElementById('daily-forecast'),
    citySuggestions: document.querySelector('.city-suggestions'),
    weatherBg: document.getElementById('weather-bg'),
    geoError: document.getElementById('geo-error')
};

// –ò–∫–æ–Ω–∫–∏ –ø–æ–≥–æ–¥—ã
const weatherIcons = {
    '01d': '‚òÄÔ∏è', '01n': 'üåô',
    '02d': '‚õÖ', '02n': '‚õÖ',
    '03d': '‚òÅÔ∏è', '03n': '‚òÅÔ∏è',
    '04d': '‚òÅÔ∏è', '04n': '‚òÅÔ∏è',
    '09d': 'üåßÔ∏è', '09n': 'üåßÔ∏è',
    '10d': 'üå¶Ô∏è', '10n': 'üå¶Ô∏è',
    '11d': '‚õàÔ∏è', '11n': '‚õàÔ∏è',
    '13d': '‚ùÑÔ∏è', '13n': '‚ùÑÔ∏è',
    '50d': 'üå´Ô∏è', '50n': 'üå´Ô∏è'
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
async function getBrowserLocation() {
    return new Promise((resolve, reject) => {
        if (!navigator.geolocation) {
            reject(new Error("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º"));
            return;
        }

        navigator.geolocation.getCurrentPosition(
            position => resolve(position),
            error => {
                let errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ";
                switch(error.code) {
                    case error.PERMISSION_DENIED:
                        errorMessage = "–î–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞";
                        break;
                    case error.POSITION_UNAVAILABLE:
                        errorMessage = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞";
                        break;
                    case error.TIMEOUT:
                        errorMessage = "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ";
                        break;
                }
                reject(new Error(errorMessage));
            },
            {
                enableHighAccuracy: true,
                timeout: 10000,
                maximumAge: 0
            }
        );
    });
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
async function getLocation() {
    try {
        if (isTelegram()) {
            return new Promise((resolve, reject) => {
                Telegram.WebApp.showPopup({
                    title: "–î–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏",
                    message: "–†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é?",
                    buttons: [
                        {id: 'yes', type: 'default', text: '–†–∞–∑—Ä–µ—à–∏—Ç—å'},
                        {type: 'cancel', text: '–û—Ç–º–µ–Ω–∞'}
                    ]
                }, async (buttonId) => {
                    if (buttonId === 'yes') {
                        try {
                            const position = await getBrowserLocation();
                            resolve(position);
                        } catch (error) {
                            reject(error);
                        }
                    } else {
                        reject(new Error("–î–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω"));
                    }
                });
            });
        } else {
            return await getBrowserLocation();
        }
    } catch (error) {
        throw error;
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ª–æ–∫–∞—Ü–∏–∏
elements.locationBtn.addEventListener('click', async () => {
    try {
        if (elements.geoError) elements.geoError.textContent = '';
        
        const position = await getLocation();
        const { latitude, longitude } = position.coords;
        
        const response = await fetch(
            `https://api.openweathermap.org/geo/1.0/reverse?lat=${latitude}&lon=${longitude}&limit=1&appid=${API_KEY}`
        );
        const locationData = await response.json();
        
        if (locationData.length > 0) {
            const city = locationData[0].name;
            elements.cityInput.value = city;
            await fetchWeather(city);
        } else {
            throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º");
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:', error);
        if (elements.geoError) {
            elements.geoError.textContent = error.message;
            elements.geoError.style.display = 'block';
        } else {
            showAlert(error.message);
        }
    }
});

// –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤
elements.cityInput.addEventListener('input', async (e) => {
    const query = e.target.value.trim();
    if (query.length < 2) {
        elements.citySuggestions.style.display = 'none';
        return;
    }

    try {
        const response = await fetch(
            `https://api.openweathermap.org/geo/1.0/direct?q=${query}&limit=5&appid=${API_KEY}`
        );
        const cities = await response.json();
        
        elements.citySuggestions.innerHTML = '';
        if (cities.length > 0) {
            cities.forEach(city => {
                const suggestion = document.createElement('div');
                suggestion.className = 'suggestion';
                suggestion.textContent = `${city.name}, ${city.country}`;
                suggestion.addEventListener('click', () => {
                    elements.cityInput.value = city.name;
                    elements.citySuggestions.style.display = 'none';
                    fetchWeather(city.name);
                });
                elements.citySuggestions.appendChild(suggestion);
            });
            elements.citySuggestions.style.display = 'block';
        } else {
            elements.citySuggestions.style.display = 'none';
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
        elements.citySuggestions.style.display = 'none';
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
elements.searchBtn.addEventListener('click', () => {
    const city = elements.cityInput.value.trim();
    if (city) {
        fetchWeather(city);
    }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–≥–æ–¥—ã
async function fetchWeather(city) {
    try {
        if (!city) {
            showAlert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞");
            return;
        }

        elements.hourlyForecast.innerHTML = '';
        elements.dailyForecast.innerHTML = '';
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
        const geoResponse = await fetch(
            `https://api.openweathermap.org/geo/1.0/direct?q=${city}&limit=1&appid=${API_KEY}`
        );
        const geoData = await geoResponse.json();
        
        if (!geoData || geoData.length === 0) {
            throw new Error("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.");
        }
        
        const { lat, lon } = geoData[0];
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –∏ –ø—Ä–æ–≥–Ω–æ–∑
        const [currentResponse, forecastResponse] = await Promise.all([
            fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${API_KEY}&lang=ru`),
            fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&units=metric&appid=${API_KEY}&lang=ru`)
        ]);
        
        const currentData = await currentResponse.json();
        const forecastData = await forecastResponse.json();
        
        if (currentData.cod !== 200 || forecastData.cod !== "200") {
            throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö");
        }

        setWeatherBackground(currentData.weather[0].icon);
        displayWeather(currentData, forecastData);
        localStorage.setItem('lastCity', city);
        currentCityName = city;
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞:", error);
        showAlert(error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö");
    }
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–∞
function setWeatherBackground(iconCode) {
    const bgImage = weatherBackgrounds[iconCode] || weatherBackgrounds['01d'];
    elements.weatherBg.style.backgroundImage = `url(${bgImage})`;
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
function displayWeather(current, forecast) {
    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    elements.currentCity.textContent = current.name;
    elements.currentTemp.textContent = `${Math.round(current.main.temp)}¬∞`;
    elements.currentCondition.textContent = current.weather[0].description;
    elements.tempMax.textContent = `–ú–∞–∫—Å.: ${Math.round(current.main.temp_max)}¬∞`;
    elements.tempMin.textContent = `–ú–∏–Ω.: ${Math.round(current.main.temp_min)}¬∞`;

    // –î–µ—Ç–∞–ª–∏
    elements.humidity.textContent = `${current.main.humidity}%`;
    elements.wind.textContent = `${Math.round(current.wind.speed)} –∫–º/—á`;
    elements.feelsLike.textContent = `${Math.round(current.main.feels_like)}¬∞`;
    elements.pressure.textContent = `${Math.round(current.main.pressure * 0.75)} –º–º`;
    elements.sunrise.textContent = new Date(current.sys.sunrise * 1000).toLocaleTimeString('ru', {timeStyle: 'short'});
    elements.sunset.textContent = new Date(current.sys.sunset * 1000).toLocaleTimeString('ru', {timeStyle: 'short'});
    elements.visibility.textContent = `${current.visibility / 1000} –∫–º`;
    
    // –£–§-–∏–Ω–¥–µ–∫—Å
    const uvIndex = Math.min(Math.round(current.main.temp / 5), 10);
    elements.uvIndex.textContent = uvIndex;

    // –ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑
    elements.hourlyForecast.innerHTML = '';
    const now = new Date();
    const currentHour = now.getHours();
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è 24 —á–∞—Å–æ–≤
    for (let i = 0; i < 24; i++) {
        const targetHour = (currentHour + i) % 24;
        const targetTime = new Date(now);
        targetTime.setHours(targetHour, 0, 0, 0);
        const targetTimestamp = targetTime.getTime();
        
        // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –ø—Ä–æ–≥–Ω–æ–∑
        const closest = forecast.list.reduce((prev, curr) => {
            const prevDiff = Math.abs(new Date(prev.dt * 1000) - targetTimestamp);
            const currDiff = Math.abs(new Date(curr.dt * 1000) - targetTimestamp);
            return currDiff < prevDiff ? curr : prev;
        });
        
        const hourItem = document.createElement('div');
        hourItem.className = 'hourly-item';
        hourItem.innerHTML = `
            <div class="time">${targetHour.toString().padStart(2, '0')}:00</div>
            <div class="icon">${weatherIcons[closest.weather[0].icon] || 'üå§Ô∏è'}</div>
            <div class="temp">${Math.round(closest.main.temp)}¬∞</div>
        `;
        elements.hourlyForecast.appendChild(hourItem);
    }

    // –î–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑
    const dailyForecast = forecast.list.filter((item, index) => index % 8 === 0);
    dailyForecast.slice(0, 10).forEach(day => {
        const dayItem = document.createElement('div');
        dayItem.className = 'daily-item';
        dayItem.innerHTML = `
            <div class="day">${new Date(day.dt * 1000).toLocaleDateString('ru', { weekday: 'long' })}</div>
            <div class="icon">${weatherIcons[day.weather[0].icon] || 'üå§Ô∏è'}</div>
            <div class="temps">
                <span class="max-temp">${Math.round(day.main.temp_max)}¬∞</span>
                <span class="min-temp">${Math.round(day.main.temp_min)}¬∞</span>
            </div>
        `;
        elements.dailyForecast.appendChild(dayItem);
    });

    // –ê–Ω–∏–º–∞—Ü–∏—è
    if (window.gsap) {
        gsap.from(".card", {
            opacity: 0,
            y: 20,
            stagger: 0.1,
            duration: 0.5
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    const savedCity = localStorage.getItem('lastCity') || '–ú–æ—Å–∫–≤–∞';
    elements.cityInput.value = savedCity;
    fetchWeather(savedCity);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç–µ–º—ã Telegram
if (isTelegram()) {
    Telegram.WebApp.onEvent('themeChanged', () => {
        document.body.dataset.theme = Telegram.WebApp.colorScheme;
    });
}
